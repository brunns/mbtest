language: python
os: linux
dist: xenial
jobs:
  fast_finish: true
  allow_failures:
    - os: windows
    - os: osx
    - python: 3.9-dev
    - env: DOCKER=true
  include:
    - stage: "Test"
      python: 3.7
      name: Test (Python 3.7, Linux)
      env:
        - TOX_ENV=py37
    - os: osx
      language: generic
      python: 3.7
      name: Test (Python 3.7, OSX)
      env:
        - TOX_ENV=py37
    - os: windows
      language: shell
      python: 3.7
      name: Test (Python 3.7, Windows)
      before_install:
        - choco install python --version=3.7.5
        - choco install nodejs
        - export PATH="/c/Python37:/c/Python37/Scripts:/c/Program Files/nodejs:$PATH"
        - python -m pip install --upgrade pip wheel tox
      env:
        - TOX_ENV=py37
    - python: 3.5
      name: Test (Python 3.5, Linux)
      env:
        - TOX_ENV=py35
    - python: 3.6
      name: Test (Python 3.6, Linux)
      env:
        - TOX_ENV=py36
    - python: 3.8
      name: Test (Python 3.8, Linux)
      env:
        - TOX_ENV=py38
    - python: 3.9-dev
      name: Test (Python 3.9-dev, Linux)
      env:
        - TOX_ENV=py39
    - python: 3.6
      name: Test (Python 3.6 PyPy, Linux)
      env:
        - TOX_ENV=pypy3.6
    - python: 3.8
      name: Test (Mountebank 2.1, Python 3.8, Linux)
      env:
        - TOX_ENV=py38
        - MBTEST_VERSION=2.1
    - python: 3.8
      name: Test (Mountebank 2.0, Python 3.8, Linux)
      env:
        - TOX_ENV=py38
        - MBTEST_VERSION=2.0
    - python: 3.8
      name: Test (Mountebank 1.16, Python 3.8, Linux)
      env:
        - TOX_ENV=py38
        - MBTEST_VERSION=1.16
    - name: Test (Python 3.5, Docker)
      env: DOCKER=true
      before_install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      install:
        - make use-docker
        - make build-with-python3.5
      script:
        - make test-with-python3.5
    - name: Test (Python 3.6, Docker)
      env: DOCKER=true
      before_install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      install:
        - make use-docker
        - make build-with-python3.6
      script:
        - make test-with-python3.6
    - name: Test (Python 3.7, Docker)
      env: DOCKER=true
      before_install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      install:
        - make use-docker
        - make build-with-python3.7
      script:
        - make test-with-python3.7
    - name: Test (Python 3.8, Docker)
      env: DOCKER=true
      before_install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      install:
        - make use-docker
        - make build-with-python3.8
      script:
        - make test-with-python3.8
    - stage: "Code quality checks"
      python: 3.8
      name: Check formatting
      env:
        - TOX_ENV=check-format
    - python: 3.8
      name: Run flake8 checks
      env:
        - TOX_ENV=flake8
    - python: 3.8
      name: Run bandit checks
      env:
        - TOX_ENV=bandit
    - python: 3.8
      name: Run mypy checks
      env:
        - TOX_ENV=mypy
    - stage: "Documentation"
      python: 3.8
      name: Generate documentation
      env:
        - TOX_ENV=docs
    - python: 3.6
      name: Publish coverage
      env:
        - TOX_ENV=publish-coverage
        - secure: "iBpfQQnq7LqJC9Tc4M7EuRiK5RSZLjsmacp6Ns9obpkkHQyJFWS80760BOD8iBsi9cor5w6z0JzLBIJYLGRZAmUNW7y76K+NKXs9pEn/i6mF7V8rXCzU6tyJ28xH6csNt9KAkoHIbXmt+0TAa4tN+uCRq2c7rHVbuarCfQBVislpJZl9qz61WVvDBfxpefL4VKCkteHxNTGMdZvw0wnc1+RvluNLeuNQ6TpPnJ7iS2FPGXOOMhcj26ZVL5cPMqIwX5IIo2JlWczMqXYWwoN+PC+4YlZclH+c73yl3XcZL9twq4g1cvW39HKAd5QDpQPapLep+3OF39bBiYetlqLUImHgCI/IwufV7RSceW+HUv1rqTVIteglRWhmR1ePZYeuJxLsuGnIbKRJcUnob7spk2Oxwr+ZrvqqC3+ivSpaPQiZjtIp2mdTEvetWm6X7xjMvk8FQKJZedp8CaRO8TEd9U5Cy3XxCA/hXNIThhxWtkpCwqmGs/VGV6Ao6swsuN/z9YxUQ2uIKvml7KwzCj1QYOhpHkdcxRGyTy/xoEUvQ4Vm7XGcrxksUKKBu1K9VCIdANo73w0WwTM6BPSWiMKDMHCUaJFqLiSr3gZwT2oUrPt83f9THdY7hl67NeZB7v0DHm/c4BSXf7nrkWmxREAUd86KRcrdczqe7NIJJGzpkRM="

before_install:
  - nvm install 12
  - pip install --upgrade tox
install:
  - python --version
  - pip --version
  - node --version
  - npm --version
  - npm install mountebank@"${MBTEST_VERSION:-2.2}" --production
script:
  - tox -e $TOX_ENV
